
TOKEN = "?"
import json
import asyncio
import logging
import sys
import time

from aiogram import Bot, Dispatcher, Router, types , F 
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart , Command
from aiogram.types import Message , CallbackQuery ,FSInputFile
from aiogram.utils.markdown import hbold
from aiogram.fsm.context import FSMContext
from aiogram.methods import SendMediaGroup
from aiogram.types import InputMediaPhoto
from aiogram.types import ReplyKeyboardMarkup , InlineKeyboardMarkup , InlineKeyboardButton , KeyboardButton , ReplyKeyboardRemove

from states1 import sendall
from states1 import photostate # –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å.
from states1 import deletephoto
from states1 import getfeedback
import buttons





admin_id = "6355200375"
group_id = -1001954008760

# All handlers should be attached to the Router (or Dispatcher)
bot = Bot(TOKEN)
dp = Dispatcher()
router = Router()



#photo_filetyan = "AgACAgIAAxkBAAIG6WZ5f9ULu2w_VE7RKmojAzlQ49muAAJe2jEb91zJS65rcv4gK-2kAQADAgADeAADNQQ"
#photo_filecar ="AgACAgIAAxkBAAIG6mZ5gAlOqGiXDTgJ1SSbn-WTrXpvAAJj2jEb91zJS6oFaCGcX4mpAQADAgADeQADNQQ"
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞ [users.json]
def load_users():
    try:
        with open('users.json', 'r') as json_file:
            data = json.load(json_file)
    except FileNotFoundError:
        data = {}
    return data

def save_users(data):
    with open('users.json', 'w') as json_file:
        json.dump(data, json_file, indent=4)


photo_path = r"C:\Users\user\Desktop\Tasks Codeforces\tyanka.jpg"
photo = FSInputFile(photo_path)
 #–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞ , –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤—Å—è —Ä–∞–±–æ—Ç–∞
@dp.message(Command('start'))
async def getstarted(message: Message):
    user_id = str(message.from_user.id)
    users = load_users()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    if user_id not in users['users']:
        users['users'][user_id] = {"photos": []}
        save_users(users)
        #json_string = json.dumps(users, ensure_ascii=False, indent=4)
    ##
     #   #await bot.send_message(
        ##            chat_id=group_id,
        ##            text=json_string
         #       )
    await message.answer_photo(photo,"""–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>! üëã

–ú–µ–Ω—è –∑–æ–≤—É—Ç <i>Oblako_29</i>. –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.

–≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ª–µ–≥–∫–æ –∏ —É–¥–æ–±–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ. –û–Ω –ø–æ–¥–æ–π–¥–µ—Ç –∫–∞–∂–¥–æ–º—É, –∫—Ç–æ —Ü–µ–Ω–∏—Ç —Å–≤–æ–∏ –º–æ–º–µ–Ω—Ç—ã –∏ —Ö–æ—á–µ—Ç –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Å—Ç—Ä–æ –∫ –Ω–∏–º –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è.

–¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ 50 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –∏ —è –∏—Ö –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—é. –£ —Ç–µ–±—è —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
""",parse_mode="HTML",reply_markup=buttons.mainkb)
    


#–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
def add_photo(user_id, photo_url):
    users = load_users()
    if user_id not in users['users']:
        users['users'][user_id] = {"photos": []}
    
    photo_list = users['users'][user_id]['photos']
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    if len(photo_list) < 50:
        photo_id = len(photo_list) + 1
        photo_list.append({"id": photo_id, "url": photo_url})
        save_users(users)
        return f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞. –£ –≤–∞—Å —Ç–µ–ø–µ—Ä—å {len(photo_list)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."
        
    
    else:
        return "–£ –≤–∞—Å —É–∂–µ 50 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ."
#—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
def delete_photo(user_id, photo_id):
    users = load_users()
    if user_id in users['users']:
        photo_list = users['users'][user_id]['photos']
        photo_list = [photo for photo in photo_list if photo['id'] != photo_id]
        for idx, photo in enumerate(photo_list):
            photo['id'] = idx + 1
        users['users'][user_id]['photos'] = photo_list
        save_users(users)

# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
@dp.message(F.text.contains("–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–∫—É ‚úÖ"))
async def add_photo_command(message: Message , state: FSMContext):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.",reply_markup=buttons.otmena)
    await state.set_state(photostate.wait)
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ 
@dp.message(photostate.wait, F.photo)
async def photo_received(message: types.Message, state: FSMContext):
    users = load_users()
    user_id = str(message.from_user.id)
    photo_url = message.photo[-1].file_id
    result_message = add_photo(user_id, photo_url)
    await message.answer(result_message,reply_markup=buttons.mainkb)
    json_string = json.dumps(users, ensure_ascii=False, indent=4)
    
    #await bot.send_message(
    #            chat_id=group_id,
    #            text=json_string
    #        )
    await state.clear()
# –£–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å max id 
def get_last_photo_id(user_id):
    users = load_users()
    photos = users["users"].get(user_id, {}).get("photos", [])
    if photos:
        return photos[-1]["id"]
    else:
        return None






# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–∫–∏ 
@dp.message(F.text.contains("–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–∫—É ‚ùå"))
async def handle_delete_photo(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.", reply_markup=buttons.otmena)
    await state.set_state(deletephoto.delphoto)

@dp.message(deletephoto.delphoto)
async def processofdeleting(message: Message, state: FSMContext):
    users = load_users()
    if message.text == "–û—Ç–º–µ–Ω–∞ ‚ùå":
        await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=buttons.mainkb)
        await state.clear()
        return
    
    user_id = str(message.from_user.id)
    
    try:
        photo_id = int(message.text)  # –∏–Ω–ø—É—Ç —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫–æ–π –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–Ω —Ö–æ—á–µ—Ç —É–¥–∞–ª–∏—Ç—å.
        last_photo_id = get_last_photo_id(user_id) # –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ id –≤ "photos"
        
        if last_photo_id is None: # –ï—Å–ª–∏ –Ω–µ—Ç—É –≤–æ–æ–±—â–µ —Ñ–æ—Ç–æ–∫ —Ç–æ –æ–Ω –ø–∏—à–µ—Ç –≤–æ—Ç —Ç–∞–∫.
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.", reply_markup=buttons.mainkb)
            await state.clear()
        elif photo_id < 1 or photo_id > last_photo_id:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=buttons.mainkb)
        else:
            delete_photo(user_id, photo_id)
            await message.reply(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å –Ω–æ–º–µ—Ä–æ–º {photo_id} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=buttons.mainkb)
            await state.clear()
            json_string = json.dumps(users, ensure_ascii=False, indent=4)
    
            #await bot.send_message(
            #            chat_id=group_id,
            #            text=json_string
            #        )
    
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=buttons.mainkb)
        await state.clear()
    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}", reply_markup=buttons.mainkb)
        await state.clear()

@dp.message(F.text.contains("–û—Ç–º–µ–Ω–∞ ‚ùå"))
async def cancel(message: Message, state: FSMContext):
    await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=buttons.mainkb)
    await state.clear()



# –ü–æ–∫–∞–∑ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ–∫:
@dp.message(F.text.contains("–ú–æ–∏ —Ñ–æ—Ç–∫–∏ üéû"))
async def handle_my_photos(message: Message):
    user_id = str(message.from_user.id)
    users = load_users()
    
    if user_id in users['users'] and users['users'][user_id]['photos']:
        photos = users['users'][user_id]['photos'][:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        message_text = "–í–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:\n"
        
        if len(photos) <= 10:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥—Ä—É–ø–ø–æ–π
            media_group = [InputMediaPhoto(media=photo['url'], caption=f"–û–±—ä–µ–∫—Ç {photo['id']}") for photo in photos]
            message_text += "\n".join([f"–§–æ—Ç–∫–∞ {photo['id']}" for photo in photos])
            
            await message.reply(message_text)
            await bot.send_media_group(chat_id=message.chat.id, media=media_group)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –æ–¥–Ω–æ–π
            await message.reply(message_text)
            for photo in photos:
                await bot.send_photo(chat_id=message.chat.id, photo=photo['url'], caption=f"–§–æ—Ç–∫–∞ {photo['id']}")
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")

# //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


@dp.message(Command("sendall"))
async def sendmessagestoall(message: Message,state: FSMContext):
    if str(message.from_user.id) == admin_id:
        await message.answer(f'–ó–¥—Ä–∞–≤—Å–≤—Ç—É–π—Ç–µ <b>{message.from_user.first_name}</b> . –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —Ä–∞–∑–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–∫–æ–π?',parse_mode="HTML",reply_markup=buttons.photoyesorno)
    else:
        await message.answer("Error!")

@dp.callback_query(lambda c: c.data in ["yesphoto", "nophoto"])
async def process_photo_choice(callback: CallbackQuery, state: FSMContext):
    if callback.data ==   "yesphoto":
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–∫—É")
        await state.set_state(sendall.getphoto)
    else:
        await callback.message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç!")
        await state.set_state(sendall.gettext)

@dp.message(sendall.getphoto , F.photo)
async def get_photo2(message: Message, state : FSMContext):
    await state.update_data(getphoto=message.photo[-1].file_id)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç!")
    await state.set_state(sendall.gettext)

@dp.message(sendall.gettext)
async def gettext123(message: Message, state: FSMContext):
    await state.update_data(gettext=message.text)
    await message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –Ω–µ—Ç ? ",reply_markup=buttons.buttonyesorno)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –±–µ–∑
@dp.callback_query(lambda c: c.data in ["yesbutton", "nobutton"])
async def process_button_choice(callback: CallbackQuery, state: FSMContext):
    if callback.data == "yesbutton":
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏!")
        await state.set_state(sendall.getbutton)
    else:
        await send_preview(callback.message, state)

# –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_preview(message, state):
    data = await state.get_data()
    if 'getphoto' in data and data['getphoto']:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=data['getphoto'],
            caption=data['gettext'],
            reply_markup=create_keyboard(data)
        )
    else:
        await message.answer(
            text=data['gettext'],
            reply_markup=create_keyboard(data)
        )
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å?", reply_markup=buttons.confirmationyesorno)

@dp.message(sendall.getbutton)
async def getbutton123(message: Message, state: FSMContext):
    await state.update_data(getbutton=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:")
    await state.set_state(sendall.getlink)

@dp.message(sendall.getlink)
async def getlink342(message: Message, state: FSMContext):
    await state.update_data(getlink=message.text)
    await send_preview(message, state)





# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(data):
    if 'getbutton' in data and data['getbutton'] and 'getlink' in data and data['getlink']:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=data['getbutton'], url=data['getlink'])]
            ],
            resize_keyboard=True
        )
    return None


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.callback_query(lambda c: c.data == "yesconfirm")
async def confirm_send(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    added_keyboards = create_keyboard(data)

    data1 = load_users()

    if 'users' not in data1:
        await callback.message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
        await state.clear()
        return
    
    user_ids = list(data1['users'].keys())
    j = 0

    for i in user_ids:
        try:
            if 'getphoto' in data and data['getphoto']:
                await bot.send_photo(
                    chat_id=i,
                    photo=data['getphoto'],
                    caption=data['gettext'],
                    reply_markup=added_keyboards
                )
            else:
                await bot.send_message(
                    chat_id=i,
                    text=data['gettext'],
                    reply_markup=added_keyboards
                )
            j += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {i}: {e}")
        await asyncio.sleep(0.33)  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ asyncio.sleep –≤–º–µ—Å—Ç–æ time.sleep –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞

    await callback.message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: {j}")
    await state.clear()

@dp.message(F.text.contains("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è üìú"))
async def deliverintruction(message: Message):
    await message.answer_photo("carlol.jpg" ,f"""–ü—Ä–∏–≤–µ—Ç <b>{message.from_user.first_name}</b>!
–£ —Ç–µ–±—è –µ—Å—Ç—å —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏:
<b>–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–∫—É ‚úÖ</b> - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, –∏ –±–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç —É —Ç–µ–±—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–Ω–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.
                               
<b>–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–∫—É ‚ùå</b> - —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏, –ø–æ–¥ –∫–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –æ–Ω–∞ –∏–¥–µ—Ç, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä (–æ—Ç 1 –¥–æ n-—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π).
                               
<b>–ú–æ–∏ —Ñ–æ—Ç–∫–∏ üéû</b> - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.

–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <b>/feedback</b>, –∏ —Ç–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–æ–π–¥—É—Ç –¥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–π.

–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚ù§Ô∏è.
""",parse_mode="HTML")
   



@dp.message(F.photo)
async def getphotoandid(message: Message):
    ph = message.photo[-1].file_id
    print(ph)

@dp.message(F.text.lower() == "—ç")
async def getinfoaboutusers(message: Message):
    if str(message.from_user.id) != admin_id:
        await message.answer("Error.")
    else:
        users = load_users()
        user_ids = list(users['users'].keys())
        user_len = len(user_ids)
        await bot.send_message(message.chat.id, f"{user_ids} - <b>–ê–π–¥–∏—à–∫–∏ —é–∑–µ—Ä–æ–≤</b>\n{user_len} - <b>–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>",parse_mode='HTML')
  

@dp.message(Command("feedback"))
async def getfeedbackfromuser(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –Ω–∏–∂–µ!")
    await state.set_state(getfeedback.fb)

@dp.message(getfeedback.fb)
async def startdelivering(message: Message , state: FSMContext):
    msg = message.text
    await bot.send_message(group_id,f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - @{message.from_user.username}\n–û—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–∂–µ–ª–∞–Ω–∏–µ: \n<b>{msg}</b>",parse_mode="HTML")
    await state.clear()



async def main() -> None:
    
    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    
    # And the run events dispatching
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())